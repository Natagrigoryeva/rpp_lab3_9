from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

import logging
import os

logging.basicConfig(level=logging.INFO)

# Получение токена из переменных окружения
bot_token = os.getenv('API_TOKEN')

# Создание бота с токеном, который выдал в BotFather при регистрации бота
bot = Bot(token=bot_token)

# Инициализация диспетчера команд
dp = Dispatcher(bot, storage=MemoryStorage())


# Форма, которая хранит информацию о пользователе
class Form(StatesGroup):
    name = State()
    cash = State()

class Form2(StatesGroup):
    name2 = State()
    sum = State()

# Обработка команды /start
@dp.message_handler(commands=['save_currency'])
async def start_command(message: types.Message):
    await Form.name.set()
    await message.reply('Введите название валюты')


# обработка введенного имени
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    user_data = await state.get_data()
    await Form.cash.set()
    await message.reply('Курс валюты к рублю')


@dp.message_handler(state=Form.cash)
async def process_cash(message: types.Message, state: FSMContext):
    await state.update_data(cash=message.text)
    user_data = await state.get_data()
    await state.finish()
    await message.reply('Курс валюты сохранен')


@dp.message_handler(commands=['convert'])
async def start_command2(message: types.Message):
    await Form.name2.set()
    await message.reply('Введите название валюты')


@dp.message_handler(state=Form2.name2)
async def process_name2(message: types.Message, state: FSMContext):
    await state.update_data(name2=message.text)
    user_data = await state.get_data()
    await Form.sum.set()
    await message.reply('Количество валюты')


@dp.message_handler(state=Form2.sum)
async def process_sum(message: types.Message, state: FSMContext):
    await state.update_data(sum=message.text)
    user_data = await state.get_data()
    await message.reply(user_data['sum'] / user_data['cash'])


# Точка входа в приложение
if __name__ == '__main__':
    dp.middleware.setup(LoggingMiddleware())
    executor.start_polling(dp, skip_updates=True)
